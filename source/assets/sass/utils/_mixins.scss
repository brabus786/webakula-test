@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
  $max: breakpoint-max($name, $breakpoints);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}

@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($lower, $breakpoints);
  $max: breakpoint-max($upper, $breakpoints);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($lower, $breakpoints) {
      @content;
    }
  } @else if $min == null {
    @include media-breakpoint-down($upper, $breakpoints) {
      @content;
    }
  }
}

// fonts

@mixin type-setting($level) {
  font-size: type-scale($level);
  line-height: line-height($level);
}

//components

@mixin position($position-x: center, $position-y: center, $direction: row, $display:flex) {
  display: $display;
  justify-content: $position-x;
  align-items: $position-y;
  flex-direction: $direction;
}

@mixin button-custom-them(
  $color, $background, $background-hover,
  $border-radius: $main-border-radius,
  $border:$background,
  $border-hover:$background-hover,
  $color-hover:$color,
  $min-height: auto
) {
  color: $color;
  background: $background;
  border: 1px solid $border;
  border-radius: $border-radius !important;
  transition: background 0.15s ease-out, border 0.15s ease-out;
  min-height: $min-height;
  cursor: pointer;
  box-shadow:0 4px 5px 0 rgba(0, 0, 0, 0.20) ;

  &:hover {
    color: $color-hover;
    background: $background-hover;
    border: 1px solid $border-hover;
  }

}

@mixin icon-control($color: inherit, $size: auto, $height: inherit, $width: auto) {
  color: $color;
  font-size: icon-size($size);

}

@mixin overlay($speed: 0.2s, $z-index: z-index('overlay')) {
  z-index: $z-index;
  width: 100%;
  height: 100%;
  position: absolute;
  background: transparent;
  transition: background $speed ease-out;
}

@mixin z-index($index-level) {
  z-index: z-index($index-level);
}

@mixin border($side: 'bottom', $width: 1px, $type: solid, $color: $main-border-color) {
  @if $side == around {
    border: $width $type $color;
  } @else {
    border-#{$side}: $width $type $color;
  }
}

/// Triangle helper mixin
/// @param {Direction} $direction - Triangle direction, either `top`, `right`, `bottom` or `left`
/// @param {Color} $color [currentcolor] - Triangle color
/// @param {Length} $size [1em] - Triangle size
@mixin triangle($direction, $color: currentcolor, $size: 1em) {
  @if not index(top right bottom left, $direction) {
    @error "Direction must be either `top`, `right`, `bottom` or `left`.";
  }

  width: 0;
  height: 0;
  content: '';
  z-index: 2;
  border-#{opposite-direction($direction)}: ($size * 1.5) solid $color;

  $perpendicular-borders: $size solid transparent;

  @if $direction == top or $direction == bottom {
    border-left: $perpendicular-borders;
    border-right: $perpendicular-borders;
  } @else if $direction == right or $direction == left {
    border-bottom: $perpendicular-borders;
    border-top: $perpendicular-borders;
  }
}